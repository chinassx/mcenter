syntax = "proto3";

package infraboard.mcenter.build;
option go_package = "github.com/infraboard/mcenter/apps/build";

import "apps/build/pb/build.proto";
import "apps/label/pb/label.proto";
import "github.com/infraboard/mcube/pb/page/page.proto";

// RPC 构建服务
service RPC {
	rpc RunBuild(RunBuildRequest) returns(BuildTask);
	rpc QueryBuild(QueryBuildRequest) returns(BuildTaskSet);
}

message RunBuildRequest {
    // 所属列表
    // @gotags: bson:"service_selector" json:"service_selector"
    label.LabelSelector service_selector = 1;
    // 所属列表
    // @gotags: bson:"service_ids" json:"service_ids"
    repeated string service_ids = 2;
    // 自动部署相关配置
    // @gotags: bson:"auto_deploy_options" json:"auto_deploy_options"
    AutoDeployOptions auto_deploy_options = 3;
}

// 自动部署相关配置
message AutoDeployOptions {
    // 是否开启服务的自动部署,如果开启 构建成功后会执行自动部署
    // @gotags: bson:"enabled" json:"enabled"
    bool enabled  = 1;
    // 自动部署的环境列表, 那些环境允许执行自动部署
    // @gotags: bson:"envs" json:"envs"
    repeated string envs = 2;
    // 服务标签, 打有相应标签的部署才执行自动部署
    // @gotags: bson:"deploy_selector" json:"deploy_selector"
    label.LabelSelector deploy_selector = 14;
}

message QueryBuildRequest {
    // 分页参数
    // @gotags: json:"page"
    infraboard.mcube.page.PageRequest page = 1;
    // 所属Domain
    // @gotags: json:"domain" validate:"required"
    string domain = 2;
    // 所属空间
    // @gotags: json:"namespace"
    string namespace = 3;
    // 所属服务
    // @gotags: json:"service_id"
    string service_id = 4;
    // 构建Id
    // @gotags: json:"task_ids"
    repeated string task_ids = 5;
}

